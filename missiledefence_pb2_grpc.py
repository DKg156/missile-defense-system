# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import missiledefence_pb2 as missiledefence__pb2


class CommanderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.soldier_ready = channel.unary_unary(
                '/missiledefense.Commander/soldier_ready',
                request_serializer=missiledefence__pb2.ConnectionRequest.SerializeToString,
                response_deserializer=missiledefence__pb2.NewCommanderFilter.FromString,
                )
        self.missile_approaching = channel.unary_stream(
                '/missiledefense.Commander/missile_approaching',
                request_serializer=missiledefence__pb2.SoldierFilter.SerializeToString,
                response_deserializer=missiledefence__pb2.MissileApproaching.FromString,
                )
        self.status = channel.unary_unary(
                '/missiledefense.Commander/status',
                request_serializer=missiledefence__pb2.WasHit.SerializeToString,
                response_deserializer=missiledefence__pb2.CommanderStatus.FromString,
                )
        self.elect_commander = channel.unary_unary(
                '/missiledefense.Commander/elect_commander',
                request_serializer=missiledefence__pb2.NewCommanderDetails.SerializeToString,
                response_deserializer=missiledefence__pb2.Empty.FromString,
                )


class CommanderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def soldier_ready(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def missile_approaching(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def elect_commander(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommanderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'soldier_ready': grpc.unary_unary_rpc_method_handler(
                    servicer.soldier_ready,
                    request_deserializer=missiledefence__pb2.ConnectionRequest.FromString,
                    response_serializer=missiledefence__pb2.NewCommanderFilter.SerializeToString,
            ),
            'missile_approaching': grpc.unary_stream_rpc_method_handler(
                    servicer.missile_approaching,
                    request_deserializer=missiledefence__pb2.SoldierFilter.FromString,
                    response_serializer=missiledefence__pb2.MissileApproaching.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=missiledefence__pb2.WasHit.FromString,
                    response_serializer=missiledefence__pb2.CommanderStatus.SerializeToString,
            ),
            'elect_commander': grpc.unary_unary_rpc_method_handler(
                    servicer.elect_commander,
                    request_deserializer=missiledefence__pb2.NewCommanderDetails.FromString,
                    response_serializer=missiledefence__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'missiledefense.Commander', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Commander(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def soldier_ready(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/missiledefense.Commander/soldier_ready',
            missiledefence__pb2.ConnectionRequest.SerializeToString,
            missiledefence__pb2.NewCommanderFilter.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def missile_approaching(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/missiledefense.Commander/missile_approaching',
            missiledefence__pb2.SoldierFilter.SerializeToString,
            missiledefence__pb2.MissileApproaching.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/missiledefense.Commander/status',
            missiledefence__pb2.WasHit.SerializeToString,
            missiledefence__pb2.CommanderStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def elect_commander(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/missiledefense.Commander/elect_commander',
            missiledefence__pb2.NewCommanderDetails.SerializeToString,
            missiledefence__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
